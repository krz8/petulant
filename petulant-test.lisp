(defpackage #:petulant-test
  (:use #:cl #:5am)
  (:export #:all #:util			; suites
	   #:make-option-fixer)		; test sets
  (:import-from #:petulant
		#:make-option-fixer #:with-chars #:make-optwitharg-tester))

(in-package #:petulant-test)

(def-suite all :description "all petulant tests")
(def-suite util :description "petulant misc utilities" :in all)

(in-suite util)

(test make-option-fixer
  (let ((fn (make-option-fixer)))
    (flet ((fn (x) (funcall fn x)))
      (is (char= (fn #\a) #\a))
      (is (char= (fn #\B) #\B))
      (is (char= (fn "c") #\c))
      (is (char= (fn "D") #\D))
      (is (string= (fn "foo") "foo"))
      (is (string= (fn "BaR") "BaR"))
      (is (string= (fn "BAZ") "BAZ"))
      (is (string= (fn "") ""))))
  (let ((fn (make-option-fixer :string)))
    (flet ((fn (x) (funcall fn x)))
      (is (string= (fn #\a) "a"))
      (is (string= (fn #\B) "B"))
      (is (string= (fn "c") "c"))
      (is (string= (fn "D") "D"))
      (is (string= (fn "foo") "foo"))
      (is (string= (fn "BaR") "BaR"))
      (is (string= (fn "BAZ") "BAZ"))
      (is (string= (fn "") ""))))
  (let ((fn (make-option-fixer :up)))
    (flet ((fn (x) (funcall fn x)))
      (is (char= (fn #\a) #\A))
      (is (char= (fn #\B) #\B))
      (is (char= (fn "c") #\C))
      (is (char= (fn "D") #\D))
      (is (string= (fn "foo") "FOO"))
      (is (string= (fn "BaR") "BAR"))
      (is (string= (fn "BAZ") "BAZ"))
      (is (string= (fn "") ""))))
  (let ((fn (make-option-fixer :down)))
    (flet ((fn (x) (funcall fn x)))
      (is (char= (fn #\a) #\a))
      (is (char= (fn #\B) #\b))
      (is (char= (fn "c") #\c))
      (is (char= (fn "D") #\d))
      (is (string= (fn "foo") "foo"))
      (is (string= (fn "BaR") "bar"))
      (is (string= (fn "BAZ") "baz"))
      (is (string= (fn "") ""))))
  (let ((fn (make-option-fixer :key)))
    (flet ((fn (x) (funcall fn x)))
      (is (eq (fn #\a) :a))
      (is (eq (fn #\B) :b))
      (is (eq (fn "c") :c))
      (is (eq (fn "D") :d))
      (is (eq (fn "foo") :foo))
      (is (eq (fn "BaR") :bar))
      (is (eq (fn "BAZ") :baz))
      (is (null (fn ""))))))

(test with-chars
  (let ((str "abcde"))
    (with-chars (a b c) str
      (is (char= a #\a))
      (is (char= b #\b))
      (is (char= c #\c))))
  (let ((str "fg"))
    (with-chars (f g h) str
      (is (char= f #\f))
      (is (char= g #\g))
      (is (null h)))))

(test make-optwitharg-tester
  (let ((fn (make-optwitharg-tester '(#\a #\B "c" "D" "eat" "Flip" "GO"))))
    (flet ((fn (o) (funcall fn o)))
      (is (not (null (fn #\a))))
      (is (not (null (fn #\B))))
      (is (null (fn #\c)))
      (is (null (fn #\D)))
      (is (null (fn "a")))
      (is (null (fn "B")))
      (is (not (null (fn "c"))))
      (is (not (null (fn "D"))))
      (is (not (null (fn "eat"))))
      (is (not (null (fn "Flip"))))
      (is (not (null (fn "GO"))))
      (is (null (fn "")))
      (is (null (fn #\e)))
      (is (null (fn #\F)))
      (is (null (fn #\A)))
      (is (null (fn #\b)))
      (is (null (fn #\C)))
      (is (null (fn #\d)))
      (is (null (fn "A")))
      (is (null (fn "b")))
      (is (null (fn "C")))
      (is (null (fn "d")))
      (is (null (fn "Eat")))
      (is (null (fn "flIP")))
      (is (null (fn "go")))))
  (let ((fn (make-optwitharg-tester '(#\a #\B "c" "D" "eat" "Flip" "GO") :UP)))
    (flet ((fn (o) (funcall fn o)))
      (is (not (null (fn #\a))))
      (is (not (null (fn #\B))))
      (is (null (fn #\c)))
      (is (null (fn #\D)))
      (is (null (fn "a")))
      (is (null (fn "B")))
      (is (not (null (fn "c"))))
      (is (not (null (fn "D"))))
      (is (not (null (fn "eat"))))
      (is (not (null (fn "Flip"))))
      (is (not (null (fn "GO"))))
      (is (null (fn "")))
      (is (null (fn #\e)))
      (is (null (fn #\F)))
      (is (not (null (fn #\A))))
      (is (not (null (fn #\b))))
      (is (null (fn #\C)))
      (is (null (fn #\d)))
      (is (null (fn "A")))
      (is (null (fn "b")))
      (is (not (null (fn "C"))))
      (is (not (null (fn "d"))))
      (is (not (null (fn "Eat"))))
      (is (not (null (fn "flIP"))))
      (is (not (null (fn "go"))))
      (is (null (fn "hoo"))))))
